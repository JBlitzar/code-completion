K=10,T=0.8: <data>_ p = none ) : <newline> <newline> dist = ( jnp . reshape ( target _ vec , ( target _ vec . shape [ 0 ] , 1 ) ) <newline> <tab> <tab> - jnp . reshape ( initial _ vec , ( 1 , initial _ vec . shape [ 0 ] ) ) ) <newline> <newline> if norm _ p is none or norm _ p = = 1 : <newline> <tab> return jnp . abs ( dist ) <newline> elif norm _ p = = 2 : <newline> <tab> return jnp . square ( dist </data>= , = _ _ = ( _ <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> ) <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> 
K=10,T=0.8: <data>: " the input training data file ( a text file ) . " } <newline> <tab> ) <newline> <tab> eval _ data _ file : optional [ str ] = field ( <newline> <tab> <tab> default = none , <newline> <tab> <tab> metadata = { " help " : " an optional input evaluation data file to evaluate the perplexity on ( a text file ) . " } , <newline> <tab> ) <newline> <tab> line _ by _ line : bool = field ( <newline> <tab> <tab> default = true , <newline> <tab> <tab> metadata = { " </data><newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> self 0 , <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> 
K=10,T=0.8: <data>= optim . lr _ scheduler . multi step lr ( optimizer , <UNK> = [ 6 0 , 1 2 0 , 1 6 0 ] , gamma = 0 . 2 ) <newline> <tab> train _ dataset = get _ train _ dataset ( ) <newline> <tab> train _ loader = torch . utils . data . data loader ( train _ dataset , batch _ size = args . batch _ size , num _ workers = 4 , <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> pin _ memory = true ) </data><newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> print ( ' <newline> <tab> elif <UNK> . <UNK> ( 2 , <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> 
K=10,T=0.8: <data><tab> <tab> <tab> <tab> <tab> <tab> <tab> [ none , none , self . params [ ' hidden _ size ' ] ] , <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> name = ' node _ features ' ) <newline> <tab> <tab> <newline> <tab> <tab> self . placeholders [ ' node _ mask ' ] = tf . placeholder ( tf . float 3 2 , [ none , none ] , name = ' node _ mask ' ) <newline> <tab> <tab> self . placeholders [ ' </data>, args . add ( self . add _ data _ <UNK> _ data [ ' ) <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> 
K=10,T=0.8: <data><tab> has _ mxnet = true <newline> except import error : <newline> <tab> has _ mxnet = false <newline> <newline> <newline> def _ convert _ bn ( k ) : <newline> <tab> aux = false <newline> <tab> if k = = ' bias ' : <newline> <tab> <tab> add = ' beta ' <newline> <tab> elif k = = ' weight ' : <newline> <tab> <tab> add = ' gamma ' <newline> <tab> elif k = = ' running _ mean ' : <newline> <tab> <tab> aux = true <newline> <tab> <tab> add = ' <UNK> _ mean ' <newline> </data><tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> return ' ) <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <UNK> = ' ] . <UNK> = ' , ' : <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <newline> <tab> <tab> <tab> <tab> <tab> 
K=10,T=0.8: <data><tab> <tab> " b 1 _ grad " : grad _ b 1 _ last , <newline> <tab> <tab> <tab> <tab> " w 2 _ grad " : grad _ w 2 _ last , <newline> <tab> <tab> <tab> <tab> " b 2 _ grad " : grad _ b 2 _ last , <newline> <tab> <tab> <tab> } <newline> <tab> <tab> <tab> return last _ param _ dict , xqw _ mini _ batch <newline> <newline> <tab> <tab> if last _ mini _ batch _ params _ dict is not none : <newline> <tab> <tab> <tab> init _ params </data>_ params _ <UNK> = [ " : optional [ " , <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> " ) ) <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> 
K=10,T=0.8: <data>_ image = prepare _ input ( frame ) <newline> <tab> <tab> <UNK> _ img _ hand = attention _ hand . <UNK> _ map ( frame ) <newline> <tab> <tab> if has _ atlas _ encoder : <newline> <tab> <tab> <tab> <UNK> _ img _ atlas = attention _ atlas . <UNK> _ map ( frame ) <newline> <tab> <tab> <tab> cv 2 . <UNK> ( " attention atlas " , <UNK> _ img _ atlas ) <newline> <tab> <tab> img = image . <UNK> ( frame . copy ( ) ) <newline> <tab> <tab> hand _ crop = </data><UNK> ( <newline> <newline> <tab> <tab> <tab> else : <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <UNK> = <UNK> ( ) ) <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> for k , ) ) <newline> <tab> <tab> <tab> <tab> <tab> <tab> if args . append ( 0 . append ( <UNK> _ <UNK> _ <UNK> ( <UNK> ( ) <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> ) <newline> 
K=10,T=0.8: <data>minimize ( gen _ cost , <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> var _ list = lib . params _ with _ name ( ' generator ' ) ) <newline> <tab> disc _ train _ op = tf . train . adam optimizer ( learning _ rate = 2 e - 4 , beta 1 = 0 . 5 ) . minimize ( disc _ cost , <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> </data><tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> 
K=10,T=0.8: <data>1 2 8 , 1 9 2 , 0 ) : 1 9 , <newline> <tab> <tab> <tab> ( 0 , 6 4 , 1 2 8 ) : 2 0 } <newline> <newline> return palette <newline> <newline> def palette _ <UNK> ( ) : <newline> palette _ list = pascal _ palette ( ) . keys ( ) <newline> palette = ( ) <newline> <newline> for color in palette _ list : <newline> <tab> palette + = color <newline> <newline> return palette <newline> <newline> def convert _ from _ color _ segmentation ( arr _ 3 d ) : </data><newline> <newline> <newline> <newline> <newline> def get _ _ examples = 0 : <newline> def <UNK> = 0 = true <newline> <tab> for <UNK> _ list = [ - 1 ] <newline> <newline> def compute _ _ _ path = true <newline> <tab> if ( img _ <UNK> ( ) : <newline> <newline> <tab> def <UNK> ( <UNK> = [ ] <newline> <newline> def _ <UNK> _ _ fn = [ 0 ] ) <newline> <newline> <newline> <tab> <tab> <tab> <tab> return <UNK> ( <UNK> _ name , <UNK> ( ) : <newline> def <UNK> ( <UNK> <newline> <newline> <tab> 
