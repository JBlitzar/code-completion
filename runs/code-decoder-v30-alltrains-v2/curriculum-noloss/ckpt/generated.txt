K=10,T=0.8: <data>find <UNK> <UNK> <UNK> <newline> def count <UNK> ( self , s : str ) - > int : <newline> <tab> <tab> @ cache <newline> <tab> <tab> def is <UNK> ( i , j ) : <newline> <tab> <tab> <tab> return i > = j or s [ i ] = = s [ j ] and is <UNK> ( i + 1 , j - 1 ) <newline> <tab> <tab> return sum ( is <UNK> ( i , j ) for i in range ( len ( s ) ) for j in range ( i , len ( </data><tab> <tab> <newline> <newline> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> _ <newline> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> . <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> 
K=10,T=0.8: <data>: , : , : : 2 , 1 : : 2 ] , output [ : , : , 1 : : 2 , 1 : : 2 ] ] ) / 4 . <newline> <tab> output = lib . ops . conv 2 d . conv 2 d ( name , input _ dim , output _ dim , filter _ size , output , he _ init = he _ init , biases = biases ) <newline> <tab> return output <newline> <newline> def <UNK> conv ( name , input _ dim , output _ dim , filter </data><tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> ( <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> ' <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> ' <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> 
K=10,T=0.8: <data>( tf . square ( gradients ) , <UNK> _ indices = [ 1 ] ) ) <newline> <tab> gradient _ penalty = tf . reduce _ mean ( ( slopes - 1 ) * * 2 ) <newline> <newline> <tab> disc _ cost + = lambda * gradient _ penalty <newline> <newline> disc _ params = lib . params _ with _ name ( ' discriminator ' ) <newline> gen _ params = lib . params _ with _ name ( ' generator ' ) <newline> <newline> if mode = = ' wgan - gp ' : <newline> <tab> </data><tab> <tab> ) <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> ) _ _ ) <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> 
K=10,T=0.8: <data><tab> self . placeholders [ ' node _ sequence ' ] : batch _ data [ ' node _ sequence ' ] , <newline> <tab> <tab> <tab> <tab> self . placeholders [ ' edge _ type _ masks ' ] : batch _ data [ ' edge _ type _ masks ' ] , <newline> <tab> <tab> <tab> <tab> self . placeholders [ ' edge _ type _ labels ' ] : batch _ data [ ' edge _ type _ labels ' ] , <newline> <tab> <tab> <tab> <tab> self . placeholders [ ' edge _ masks ' ] </data>= , <newline> <tab> <tab> <tab> <tab> ' ) ) <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> ) <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <UNK> _ _ _ = ' ( _ . <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> 
K=10,T=0.8: <data>= [ ] <newline> <newline> <tab> if not self . _ is _ sampler : <newline> <tab> for i in range ( lower , upper ) : <newline> <tab> <tab> x , lam = self . stage _ fwd ( x , i , self . comms , dispersion = dispersion ) <newline> <tab> <tab> <UNK> . append ( lam ) <newline> <newline> <tab> else : <newline> <tab> subkey = jax . random . split ( key , upper - lower ) <newline> <tab> for i in range ( lower , upper ) : <newline> <tab> <tab> x , lam </data>. model . <UNK> . <UNK> . _ <UNK> . . model = 2 , <newline> <tab> <tab> <tab> <tab> <tab> if . <UNK> ( ' , <newline> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> 
K=10,T=0.8: <data>( dataset ) : <tab> <newline> <tab> with open ( ' generated _ smiles _ % s ' % dataset , ' rb ' ) as f : <newline> <tab> <tab> all _ smiles = set ( pickle . load ( f ) ) <newline> <tab> count = 0 <newline> <tab> for smiles in all _ smiles : <newline> <tab> <tab> mol = chem . mol from smiles ( smiles ) <newline> <tab> <tab> if mol is not none : <newline> <tab> <tab> <tab> count + = 1 <newline> <tab> return len ( all _ smiles ) , count <newline> </data><tab> <tab> <tab> <tab> <tab> <tab> <tab> else : <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> print ( [ 0 , <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> 
K=10,T=0.8: <data>= get _ id _ classes ( class _ names ) <newline> lut = create _ lut ( class _ ids ) <newline> <newline> file _ names = load _ test _ data ( ) <newline> images , labels = create _ full _ paths ( file _ names , ' images ' , ' labels ' ) <newline> <newline> test _ net ( prototxt , caffemodel . format ( iteration _ num ) , images , labels , lut ) <newline> <newline> def load _ test _ data ( file _ name = ' test . txt ' ) </data><newline> <newline> <newline> <newline> <newline> <newline> <newline> <newline> <newline> <newline> <newline> <tab> <tab> model ( ) <newline> <newline> <newline> <tab> <tab> for i ] ) <newline> <tab> <tab> if args . shape . <UNK> ( <newline> import model , default = torch . <newline> <tab> return <UNK> _ init _ init _ size = ' ) ) <newline> <tab> model _ size = ' ) : <newline> <tab> <tab> for _ _ _ <UNK> _ <UNK> _ path . append ( x = true ) <newline> <tab> <tab> model _ <UNK> = tf . <UNK> _ name = self . 
K=10,T=0.8: <data>_ conditional _ multi _ coverage . <newline> <newline> args : <newline> <tab> confidence _ sets : confidence sets on test set as 0 - 1 array <newline> <tab> labels : ground truth labels on test set ( not in one - hot format ) <newline> <tab> conditional _ labels : conditional labels to compute coverage on a subset <newline> <tab> conditional _ label : selected conditional to compute coverage for <newline> <newline> returns : <newline> <tab> conditional coverage . <newline> compute _ conditional _ coverage with additional argument checks <UNK> . compute <UNK> - coverage for given one - </data>the <UNK> . <UNK> . <UNK> <newline> <tab> for <UNK> = true <newline> <tab> <tab> <UNK> the <UNK> . <UNK> . . <UNK> <UNK> <UNK> <newline> <newline> <tab> <UNK> to <UNK> <newline> <tab> <tab> <tab> <UNK> the <UNK> <newline> <tab> <tab> <UNK> . <UNK> the <UNK> : <newline> <tab> <UNK> <UNK> <UNK> <UNK> <UNK> <UNK> : <UNK> <UNK> <UNK> <newline> <tab> <UNK> <UNK> . <newline> <newline> <tab> <tab> for <UNK> to <UNK> <UNK> . <newline> <tab> <newline> parser . <newline> <newline> <newline> <newline> <newline> <tab> <tab> for <UNK> . . add of the . <UNK> <UNK> <newline> <tab> <UNK> <UNK> 
K=10,T=0.8: <data><newline> <tab> <tab> self . <UNK> _ token _ idx = nn . parameter ( torch . zeros ( ( self . mini _ batch _ size , ) ) ) <newline> <newline> <tab> <tab> self . share _ qk = config . share _ qk <newline> <tab> <tab> self . conv _ kernel = config . conv _ kernel <newline> <tab> <tab> self . _ init _ <UNK> _ proj ( ) <newline> <tab> <tab> self . _ init _ <UNK> ( ) <newline> <tab> <tab> <newline> <tab> <tab> self . _ init _ ttt _ lr _ gate </data>_ _ <UNK> ( self . ops [ <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> 
