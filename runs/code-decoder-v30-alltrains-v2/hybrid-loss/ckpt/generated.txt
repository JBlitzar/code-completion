K=10,T=0.8: <data><tab> self . placeholders [ ' node _ sequence ' ] : batch _ data [ ' node _ sequence ' ] , <newline> <tab> <tab> <tab> <tab> self . placeholders [ ' edge _ type _ masks ' ] : batch _ data [ ' edge _ type _ masks ' ] , <newline> <tab> <tab> <tab> <tab> self . placeholders [ ' edge _ type _ labels ' ] : batch _ data [ ' edge _ type _ labels ' ] , <newline> <tab> <tab> <tab> <tab> self . placeholders [ ' edge _ masks ' ] </data><tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> _ <tab> _ <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> 
K=10,T=0.8: <data>model _ params , lr = args . lr , weight _ decay = args . weight _ decay <newline> <tab> <tab> ) <newline> <tab> elif args . optimizer = = " <UNK> " : <newline> <tab> <tab> optimizer = torch . optim . rmsprop ( <newline> <tab> <tab> <tab> model _ params , lr = args . lr , weight _ decay = args . weight _ decay <newline> <tab> <tab> ) <newline> <tab> elif args . optimizer = = " sgd " : <newline> <tab> <tab> optimizer = torch . optim . sgd ( <newline> <tab> <tab> <tab> </data><tab> <newline> <tab> <tab> <newline> <tab> <tab> <newline> <tab> <tab> _ _ <newline> <tab> <tab> <tab> <tab> _ <tab> <tab> _ _ _ _ <tab> <tab> _ <tab> _ <tab> ) _ <tab> <tab> <tab> _ <newline> _ <tab> _ <newline> <tab> <tab> _ <tab> _ _ <newline> <tab> _ _ <tab> <tab> <tab> <tab> <tab> <tab> <tab> _ <tab> <tab> <tab> ' <tab> <newline> _ _ <newline> <tab> _ _ _ _ _ _ <tab> _ _ _ _ <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> . _ _ <tab> <newline> <tab> _ <newline> <tab> <tab> 
K=10,T=0.8: <data>= int ( batch _ size / args . grad _ accu _ steps ) <newline> <newline> <tab> for epoch in range ( args . epochs ) : <newline> <tab> <tab> start = time . time ( ) <newline> <tab> <tab> model . train ( ) <newline> <tab> <tab> <newline> <tab> <tab> train _ sampler . set _ epoch ( epoch ) <newline> <newline> <tab> <tab> <newline> <tab> <tab> train _ scheduler . step ( epoch ) <newline> <tab> <tab> loss _ tmp = 0 <newline> <tab> <tab> for step , ( images , labels ) in enumerate ( train </data>_ <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> ' _ <tab> <tab> <tab> <tab> <tab> <newline> _ _ <tab> <newline> <tab> <tab> <tab> _ _ <tab> <tab> <tab> <tab> _ <newline> <tab> <newline> <tab> <newline> <newline> <tab> _ <tab> <tab> <tab> <newline> <tab> <newline> <tab> <tab> _ _ . _ <tab> <tab> _ <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> _ <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <newline> . <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <newline> <newline> <tab> <tab> 
K=10,T=0.8: <data>= tokenizer ( inputs , text _ target = targets , max _ length = 1 2 8 , <UNK> = true ) <newline> <tab> return model _ inputs <newline> <newline> <newline> print ( f " <UNK> dataset for { model _ name } . . . " ) <newline> tokenized _ dataset = dataset . map ( tokenize _ function , batched = true ) <newline> <newline> <newline> data _ collator = data collator for seq 2 seq ( tokenizer = tokenizer , model = model _ name ) <newline> <newline> <newline> print ( f " loading metric ( </data>_ <tab> <tab> <tab> <tab> <tab> <tab> _ <tab> <tab> <tab> <newline> <newline> _ _ _ _ <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <newline> <tab> . <tab> _ _ . _ _ _ <UNK> <tab> <tab> <tab> _ . . <tab> <tab> . _ _ . <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> . _ _ <tab> <tab> <tab> <tab> <tab> <tab> <tab> <UNK> , _ _ _ _ . <newline> ( <tab> <tab> <tab> <tab> 
K=10,T=0.8: <data>confidence _ sets = jnp . greater ( <newline> <tab> <tab> confidence _ sets , jnp . ones _ like ( confidence _ sets ) * 0 . 5 ) <newline> <tab> error = 1 - cpeval . compute _ accuracy ( logits , labels ) <newline> <tab> coverage = cpeval . compute _ coverage ( confidence _ sets , labels ) <newline> <tab> size , _ = cpeval . compute _ size ( confidence _ sets ) <newline> <newline> <tab> return loss , ( new _ model _ state , { <newline> <tab> <tab> ' coverage _ loss ' </data>. ' , <newline> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> 
K=10,T=0.8: <data>output , stride = 2 ) <newline> <tab> if bn : <newline> <tab> <tab> output = normalize ( ' discriminator . bn 3 ' , [ 0 , 2 , 3 ] , output ) <newline> <tab> output = <UNK> _ gated _ nonlinearity ( output [ : , : : 2 ] , output [ : , 1 : : 2 ] ) <newline> <newline> <tab> output = lib . ops . conv 2 d . conv 2 d ( ' discriminator . 4 ' , 4 * dim , 8 * dim * 2 , 5 , output </data>. _ <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> ( = _ . . _ _ ) <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> 
K=10,T=0.8: <data>ids = [ local _ rank ] ) <newline> <tab> <newline> <tab> if args . extras = = 7 8 : <newline> <tab> <tab> <newline> <tab> <tab> tokenizer = t 5 tokenizer . from _ pretrained ( args . pretrained _ model _ path , subfolder = " tokenizer " ) <newline> <tab> <tab> <newline> <tab> <tab> text _ encoder = t 5 encoder model . from _ pretrained ( args . pretrained _ model _ path , subfolder = " text _ encoder " ) <newline> <newline> <tab> logger . info ( f " model parameters : { sum </data>_ _ _ , <tab> <newline> <tab> [ = ( _ _ . _ ' , <newline> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <newline> ) <tab> <tab> <tab> <tab> . _ . , <newline> <tab> <tab> <tab> <tab> <tab> <tab> = _ _ _ _ _ ( _ , <newline> <newline> <tab> [ , <newline> <tab> <tab> <tab> <tab> <tab> <newline> <UNK> . . , ' ( ) <newline> <newline> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> 
K=10,T=0.8: <data>. config . checkpoint _ frequency = = 0 : <newline> <tab> <tab> checkpoint . save ( ) <newline> <newline> <tab> params = hk . data _ structures . merge ( trainable _ params , fixed _ params ) <newline> <tab> return params , model _ state <newline> <newline> def _ test _ dataset ( <newline> <tab> self , params : cputils . flat mapping , model _ state : cputils . flat mapping , <newline> <tab> dataset : tf . data . dataset , name : str , epochs : int , shift _ fn : shift fn ) </data><newline> <newline> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> : <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> ) <newline> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> . <UNK> _ <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> 
K=10,T=0.8: <data>0 ] <newline> <tab> <tab> <tab> <tab> except : <newline> <tab> <tab> <tab> <tab> <tab> pass <newline> <newline> <newline> <newline> <newline> class return feature layer ( torch . nn . module ) : <newline> <tab> def _ _ init _ _ ( self , mod ) : <newline> <tab> <tab> super ( return feature layer , self ) . _ _ init _ _ ( ) <newline> <tab> <tab> self . mod = mod <newline> <tab> def forward ( self , x ) : <newline> <tab> <tab> return self . mod ( x ) , x <newline> <tab> <tab> <tab> </data><tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> , <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> ) <newline> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> <tab> 
